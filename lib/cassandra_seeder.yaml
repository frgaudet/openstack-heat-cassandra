heat_template_version: 2014-10-16

description: Deploy a Cassandra seeder instance

parameters:
  key_name:
    type: string
    description: Name of key-pair to be used for the default user
  flavor:
    type: string
    description: |
      Choose an instance flavor
  image_id:
    type: string
    label: Server image
  net_id:
    type: string
    label: Network ID
    description: ID of the network to use
  name:
    type: string
    description: Name of each Cassandra machine booted
  servers:
    type: comma_delimited_list
    label: Servers
    description: Comma separated list of servers in the cluster.
  private_key:
    type: string
    description: Name of private key to be used for the local Cassandra user
  public_network:
    type: string
    description: Public network id

resources:
  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      count: 1
      timeout: 600
 
  wait_handle:
    type: OS::Heat::WaitConditionHandle

  cassandra_seeder:
    type: OS::Nova::Server
    properties:
      key_name: { get_param: key_name }
      name: { get_param: name }
      image: { get_param: image_id }
      networks:
        - port: { get_resource: cassandra_port }
      flavor: { get_param: flavor }
      metadata:
        servers: { get_param: servers }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }
            __private_key__: { get_param: private_key }
          template: |
            #!/bin/bash

            export CASSANDRA_VERSION=3.0.6
            export JAVA_VERSION=1.8.0_91

            # Manually install Java 8 (only Java 7 available in repo)
            cd /tmp
            wget https://api.isima.fr:8080/v1/AUTH_bd20d02f33a848ca88b7f13b83968fcb/public/jdk-8u91-linux-x64.tar.gz
            tar -zxf jdk-8u91-linux-x64.tar.gz
            mkdir /usr/local/java
            mv jdk$JAVA_VERSION/ /usr/local/java

            # Export Java environment variables
            cat >> /etc/profile << EOF
            export JAVA_VERSION=$JAVA_VERSION
            JAVA_HOME=/usr/local/java/jdk\$JAVA_VERSION
            PATH=\$PATH:\$JAVA_HOME/bin
            JDK_HOME=/usr/local/java/jdk\$JAVA_VERSION
            PATH=\$PATH:\$JDK_HOME/bin
            export JAVA_HOME
            export JDK_HOME
            export PATH
            EOF

            update-alternatives --install "/usr/bin/java" "java" "/usr/local/java/jdk$JAVA_VERSION/bin/java" 1
            update-alternatives --install "/usr/bin/javac" "javac" "/usr/local/java/jdk$JAVA_VERSION/bin/javac" 1
            update-alternatives --install "/usr/bin/javaws" "javaws" "/usr/local/java/jdk$JAVA_VERSION/bin/javaws" 1
            update-alternatives --set java /usr/local/java/jdk$JAVA_VERSION/bin/java
            update-alternatives --set javac /usr/local/java/jdk$JAVA_VERSION/bin/javac
            update-alternatives --set javaws /usr/local/java/jdk$JAVA_VERSION/bin/javaws
            
            # Create local cassandra user
            useradd -m cassandra
            mkdir -p /home/cassandra/.ssh
            echo "__private_key__" > /home/cassandra/.ssh/id_rsa

            # Put ssh config
            cat > /home/cassandra/.ssh/config <<EOF
            Host *
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
            EOF

            # Install Cassandra
            cd /opt
            wget http://mirror.cc.columbia.edu/pub/software/apache/cassandra/$CASSANDRA_VERSION/apache-cassandra-$CASSANDRA_VERSION-bin.tar.gz
            tar -xf apache-cassandra-$CASSANDRA_VERSION-bin.tar.gz
            ln -s apache-cassandra-$CASSANDRA_VERSION cassandra
            mkdir /etc/default/cassandra
            
            # Fix perms
            chown -R cassandra. /opt/apache-cassandra-$CASSANDRA_VERSION
            chmod 600 /home/cassandra/.ssh/id_rsa
            chown -R cassandra. /home/cassandra/.ssh
            chown -R cassandra. /home/cassandra

            # Export Cassandra environment variables
            cat >> /home/cassandra/.profile << EOF
            export CASSANDRA_HOME=/opt/cassandra
            export PATH=\$PATH:\$CASSANDRA_HOME/bin
            EOF

            # Create Cassandra systemd service
            cat > /lib/systemd/system/cassandra.service << EOF
            [Unit]
            Description=Cassandra DB 
            After=network.target auditd.service

            [Service]
            EnvironmentFile=-/etc/default/cassandra
            ExecStart=/opt/cassandra/bin/cassandra&
            ExecReload=/bin/kill -HUP $MAINPID
            KillMode=process
            Restart=on-failure

            [Install]
            WantedBy=multi-user.target
            Alias=cassandra.service
            EOF

            cat > /etc/init/cassandra.conf << EOF
            # cassandra - DB server
            #

            description "Cassandra server"

            start on runlevel [2345]
            stop on runlevel [!2345]

            respawn
            respawn limit 10 5
            umask 022

            env SSH_SIGSTOP=1
            expect stop

            console none

            pre-start script
                test -x /opt/cassandra/bin/cassandra || { stop; exit 0; }

                mkdir -p -m0755 /var/run/cassandra
            end script

            exec /opt/cassandra/bin/cassandra
            EOF

            # Enable either systemd or Upstart service
            systemctl enable cassandra.service 2>/dev/null || ln -s /lib/init/upstart-job /etc/init.d/cassandra

            # Get nodes IP from openstack metadata
            list=$(curl http://169.254.169.254/openstack/latest/meta_data.json 2>/dev/null | python -c 'import json,sys;metadata=json.load(sys.stdin);list=json.loads(metadata.get("meta", {}).get("servers", "[]")); print tuple(map(str,list)) ')
            # Remove useless chars
            list=${list//[\' ()]}
            # Convert string to array
            IFS=',' read -r -a server_list <<< "$list"

            cp /opt/cassandra/conf/cassandra.yaml /opt/cassandra/conf/cassandra_base.yaml
            my_ip=$(ip a | grep eth0 -A1 | grep inet | awk '{print $2}' | cut -d "/" -f 1)
            
            # seeder settings
            sed -i -e "s/listen_address.*/listen_address: ${my_ip}/" \
                   -e "s/- seeds:.*/- seeds: \"${my_ip}\"/" \
                   -e "s/num_tokens:.*/num_tokens: 256/" \
                   -e "s/cluster_name.*/cluster_name: 'MyFirstCluster'/" \
                   -e "s/rpc_address:.*/rpc_address: ${my_ip}/" /opt/cassandra/conf/cassandra.yaml

            service cassandra restart
            sleep 5

            # node settings
            for ip in "${server_list[@]}"
            do
                # Create node's configuration file
                cp /opt/cassandra/conf/cassandra.yaml /opt/cassandra/conf/cassandra_${ip}.yaml
                sed -i  -e "s/listen_address.*/listen_address: ${ip}/" \
                        -e "s/rpc_address:.*/rpc_address: ${ip}/" /opt/cassandra/conf/cassandra_${ip}.yaml
                sudo -H -u cassandra scp /opt/cassandra/conf/cassandra_${ip}.yaml ${ip}:/opt/cassandra/conf/cassandra.yaml
                sudo -H -u cassandra ssh ${ip} sudo service cassandra restart
                sleep 60
            done

            # Notify Heat we're done
            wc_notify --data-binary '{"status": "SUCCESS"}'
    
  cassandra_security_group:
        type: OS::Neutron::SecurityGroup
        properties:
          name: cassandra_security_group
          rules:
            - protocol: icmp
            - protocol: tcp
              port_range_min: 22
              port_range_max: 22
            - protocol: tcp
              port_range_min: 7000
              port_range_max: 7000

  cassandra_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: net_id }
      security_groups:
        - { get_resource: cassandra_security_group }

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_network }

  floating_ip_assoc:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: floating_ip }
      port_id: { get_resource: cassandra_port }

outputs:
  name:
    description: Name of this Cassandra instance.
    value: { get_attr: [cassandra_seeder, name] }
  ip:
    description: The IP address of this Cassandra instance.
    value: { get_attr: [cassandra_seeder, first_address] }